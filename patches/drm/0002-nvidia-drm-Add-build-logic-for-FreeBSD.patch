From 4da38af3e01ed5e4d6189a244d4089873b429ee1 Mon Sep 17 00:00:00 2001
From: Austin Shafer <ashafer@nvidia.com>
Date: Tue, 5 Sep 2023 15:49:05 -0400
Subject: [PATCH 2/3] nvidia-drm: Add build logic for FreeBSD

This adds infrastructure for building nvidia-drm, but not any
compilation fixes or FreeBSD workarounds. This is just build system
changes.

This also includes WARs in the conftest script to handle FreeBSD
---
diff --git a/nvidia/src/Makefile b/nvidia/src/Makefile
index 97c031cfdb2..95b12a350b1 100644
--- a/nvidia/src/Makefile
+++ b/nvidia/src/Makefile
@@ -4,6 +4,10 @@ SUBDIR= nvidia
 SUBDIR+= nvidia-modeset
 .endif
 
+.if exists(nvidia-drm)
+SUBDIR+= nvidia-drm
+.endif
+
 setup:  install
 
 .include <bsd.subdir.mk>
diff --git a/nvidia/src/nvidia-drm/Makefile b/nvidia/src/nvidia-drm/Makefile
new file mode 100644
index 00000000000..c39097320c2
--- /dev/null
+++ b/nvidia/src/nvidia-drm/Makefile
@@ -0,0 +1,373 @@
+# Build NVIDIA DRM components using the linuxkpi
+# inspired by the linuxkpi makefile
+#
+# Austin Shafer - 2019
+
+GENERATED_KMOD_SRCS += device_if.h \
+        vnode_if.h \
+        bus_if.h \
+        pci_if.h \
+        pci_iov_if.h \
+        device_if.h \
+        iicbus_if.h \
+        opt_teken.h \
+        opt_splash.h \
+        opt_syscons.h \
+        opt_drm.h \
+        opt_vm.h \
+        opt_syscons.h
+SRCS += ${GENERATED_KMOD_SRCS}
+
+SRCS += \
+	nvidia-drm-conftest.h \
+	nvidia-drm-connector.h \
+	nvidia-drm-crtc.h \
+	nvidia-drm-drv.h \
+	nvidia-drm-encoder.h \
+	nvidia-drm-fb.h \
+	nvidia-drm-format.h \
+	nvidia-drm-gem-dma-buf.h \
+	nvidia-drm-gem-nvkms-memory.h \
+	nvidia-drm-gem-user-memory.h \
+	nvidia-drm-gem.h \
+	nvidia-drm-helper.h \
+	nvidia-drm-ioctl.h \
+	nvidia-drm-modeset.h \
+	nvidia-drm-os-interface.h \
+	nvidia-drm-fence.h \
+	nvidia-drm-priv.h \
+	nvidia-drm-utils.h \
+	nvidia-drm.h
+
+SRCS += \
+	nvidia-drm-connector.c \
+	nvidia-drm-crtc.c \
+	nvidia-drm-drv.c \
+	nvidia-drm-encoder.c \
+	nvidia-drm-fb.c \
+	nvidia-drm-format.c \
+	nvidia-drm-freebsd-lkpi.c \
+	nvidia-drm-gem-dma-buf.c \
+	nvidia-drm-gem-nvkms-memory.c \
+	nvidia-drm-gem-user-memory.c \
+	nvidia-drm-gem.c \
+	nvidia-drm-helper.c \
+	nvidia-drm-modeset.c \
+	nvidia-drm-fence.c \
+	nvidia-drm-utils.c \
+	../nvidia/nv-kthread-q.c \
+	nvidia-drm.c
+
+KMOD = nvidia-drm
+
+.ifndef BSDVER
+BSDVER != /sbin/sysctl -n kern.osreldate
+.endif
+
+KMODDIR ?= /boot/modules
+
+# So that the build can include machine/stdarg.h
+CFLAGS += -Imachine
+
+# So that the build can include sys/stddef.h
+CFLAGS += -I${SYSDIR}/sys
+
+CFLAGS += -g -I/usr/include -I../common/inc -O0 -Wno-visibility -Wno-error=unused-but-set-variable -Wno-error=missing-prototypes
+
+# to workaround dma-buf-map.h
+CFLAGS += -Wno-error=pointer-arith
+
+# FreeBSD's uint64_t on amd64 is not unsigned long long like NvU64 is, use this to have
+# us use the real uint64_t so it matches
+CFLAGS += -DNVTYPES_USE_STDINT=1
+
+CFLAGS += -DNV_VERSION_STRING=\"550.00\"
+
+include ../common/optional-cflags.mk
+
+# we need to get the linux kpi headers for compilation. BSDSRCTOP
+# is the top of a FreeBSD src tree (or empty to use /sys)
+BSDSRCTOP ?= /usr/src
+# FreeBSD linuxkpi specific headers
+# This is the path at which https://github.com/freebsd/drm-kmod is installed
+DRMKMODDIR ?= ${HOME}/git/drm-kmod
+
+NV_CONFTEST_CFLAGS = \
+        -I${DRMKMODDIR}/linuxkpi/bsd/include \
+        -I${DRMKMODDIR}/linuxkpi/gplv2/include/ \
+        -I${BSDSRCTOP}/sys/compat/linuxkpi/common/include/ \
+        -I${DRMKMODDIR}/linuxkpi/dummy/include/ \
+        -I${BSDSRCTOP}/sys/compat/linuxkpi/dummy/include/ \
+        -I${DRMKMODDIR}/include/ \
+        -I${DRMKMODDIR}/include/uapi/ \
+        -I${DRMKMODDIR}/drivers/gpu/ \
+        -I${BSDSRCTOP}/sys/contrib/ck/include
+
+CFLAGS += ${NV_CONFTEST_CFLAGS}
+
+# add src/nvidia as we need headers from there for nvidia_softc
+# we use the softc to get the device_t during probing
+CFLAGS += -I../nvidia/
+
+CFLAGS += -Wno-cast-qual -Wno-incompatible-pointer-types-discards-qualifiers
+
+#
+# Register the conftests needed by nvidia-drm.ko
+#
+
+# First we generate conftest/headers.h, which tells the rest what headers
+# are available
+
+# to include conftest/headers.h
+NV_CONFTEST_CFLAGS+=-I. -D_KERNEL -DKLD_MODULE -I/usr/src/sys -I/usr/src/sys/contrib/ck/include 
+
+# Mark the linux version we support.
+# This solves issues with things like ww_mutex_trylock, we will have
+# to bump this manually over time unfortunately
+.include "${DRMKMODDIR}/linuxkpi_version.mk"
+NV_CONFTEST_CFLAGS += -DLINUXKPI_VERSION=${LINUXKPI_VERSION_NUMBER}
+
+# Each of these headers is checked for presence with a test #include; a
+# corresponding #define will be generated in conftest/headers.h.
+NV_HEADER_PRESENCE_TESTS = \
+  asm/system.h \
+  drm/drmP.h \
+  drm/drm_aperture.h \
+  drm/drm_auth.h \
+  drm/drm_gem.h \
+  drm/drm_crtc.h \
+  drm/drm_color_mgmt.h \
+  drm/drm_atomic.h \
+  drm/drm_atomic_helper.h \
+  drm/drm_atomic_state_helper.h \
+  drm/drm_encoder.h \
+  drm/drm_atomic_uapi.h \
+  drm/drm_drv.h \
+  drm/drm_fbdev_generic.h \
+  drm/drm_framebuffer.h \
+  drm/drm_connector.h \
+  drm/drm_probe_helper.h \
+  drm/drm_blend.h \
+  drm/drm_fourcc.h \
+  drm/drm_prime.h \
+  drm/drm_plane.h \
+  drm/drm_vblank.h \
+  drm/drm_file.h \
+  drm/drm_ioctl.h \
+  drm/drm_device.h \
+  drm/drm_mode_config.h \
+  drm/drm_modeset_lock.h \
+  dt-bindings/interconnect/tegra_icc_id.h \
+  generated/autoconf.h \
+  generated/compile.h \
+  generated/utsrelease.h \
+  linux/efi.h \
+  linux/kconfig.h \
+  linux/platform/tegra/mc_utils.h \
+  linux/printk.h \
+  linux/ratelimit.h \
+  linux/prio_tree.h \
+  linux/log2.h \
+  linux/of.h \
+  linux/bug.h \
+  linux/sched.h \
+  linux/sched/mm.h \
+  linux/sched/signal.h \
+  linux/sched/task.h \
+  linux/sched/task_stack.h \
+  xen/ioemu.h \
+  linux/fence.h \
+  linux/dma-fence.h \
+  linux/dma-resv.h \
+  soc/tegra/chip-id.h \
+  soc/tegra/fuse.h \
+  soc/tegra/tegra_bpmp.h \
+  video/nv_internal.h \
+  linux/platform/tegra/dce/dce-client-ipc.h \
+  linux/nvhost.h \
+  linux/nvhost_t194.h \
+  linux/host1x-next.h \
+  asm/book3s/64/hash-64k.h \
+  asm/set_memory.h \
+  asm/prom.h \
+  asm/powernv.h \
+  linux/atomic.h \
+  asm/barrier.h \
+  asm/opal-api.h \
+  sound/hdaudio.h \
+  asm/pgtable_types.h \
+  asm/page.h \
+  linux/stringhash.h \
+  linux/dma-map-ops.h \
+  rdma/peer_mem.h \
+  sound/hda_codec.h \
+  linux/dma-buf.h \
+  linux/time.h \
+  linux/platform_device.h \
+  linux/mutex.h \
+  linux/reset.h \
+  linux/of_platform.h \
+  linux/of_device.h \
+  linux/of_gpio.h \
+  linux/gpio.h \
+  linux/gpio/consumer.h \
+  linux/interconnect.h \
+  linux/pm_runtime.h \
+  linux/clk.h \
+  linux/clk-provider.h \
+  linux/ioasid.h \
+  linux/stdarg.h \
+  linux/iosys-map.h \
+  asm/coco.h \
+  linux/vfio_pci_core.h \
+  linux/mdev.h \
+  soc/tegra/bpmp-abi.h \
+  soc/tegra/bpmp.h \
+  linux/sync_file.h \
+  linux/cc_platform.h \
+  asm/cpufeature.h
+
+.for HEADER in ${NV_HEADER_PRESENCE_TESTS}
+# Define a rule to check the header $(1).
+#
+# Depend on the headers generated by bsd.kmod.mk, without this the linuxkpi
+# files will fail to import and fail the presence test
+conftest/header_presence/${HEADER}.part: ${GENERATED_KMOD_SRCS} ${PWD}/conftest.sh ${DRMKMODDIR}
+	mkdir -p conftest/header_presence/${HEADER:H}
+	${PWD}/conftest.sh '${CC}' x86_64 ${DRMKMODDIR} this_arg_not_used_on_bsd test_kernel_header '${NV_CONFTEST_CFLAGS}' ${HEADER} > conftest/header_presence/${HEADER}.part
+
+conftest/headers.h: conftest/header_presence/${HEADER}.part
+
+.endfor
+
+# Concatenate all of the parts into headers.h.
+conftest/headers.h:
+	find conftest/header_presence/ -name "*.part" | xargs cat > conftest/headers.h
+
+NV_CONFTEST_GENERIC_COMPILE_TESTS += drm_available
+NV_CONFTEST_GENERIC_COMPILE_TESTS += drm_atomic_available
+NV_CONFTEST_GENERIC_COMPILE_TESTS += is_export_symbol_gpl_refcount_inc
+NV_CONFTEST_GENERIC_COMPILE_TESTS += is_export_symbol_gpl_refcount_dec_and_test
+NV_CONFTEST_GENERIC_COMPILE_TESTS += drm_alpha_blending_available
+NV_CONFTEST_GENERIC_COMPILE_TESTS += is_export_symbol_present_drm_gem_prime_fd_to_handle
+NV_CONFTEST_GENERIC_COMPILE_TESTS += is_export_symbol_present_drm_gem_prime_handle_to_fd
+
+conftest/generic.h: ${PWD}/conftest.sh ${DRMKMODDIR}
+	mkdir -p conftest
+	${PWD}/conftest.sh '${CC}' x86_64 ${DRMKMODDIR} this_arg_not_used_on_bsd compile_tests '${NV_CONFTEST_CFLAGS}' ${NV_CONFTEST_GENERIC_COMPILE_TESTS} > conftest/generic.h
+
+NV_CONFTEST_FUNCTION_COMPILE_TESTS += drm_dev_unref
+NV_CONFTEST_FUNCTION_COMPILE_TESTS += drm_reinit_primary_mode_group
+NV_CONFTEST_FUNCTION_COMPILE_TESTS += get_user_pages_remote
+NV_CONFTEST_FUNCTION_COMPILE_TESTS += get_user_pages
+NV_CONFTEST_FUNCTION_COMPILE_TESTS += pin_user_pages_remote
+NV_CONFTEST_FUNCTION_COMPILE_TESTS += pin_user_pages
+NV_CONFTEST_FUNCTION_COMPILE_TESTS += drm_gem_object_lookup
+NV_CONFTEST_FUNCTION_COMPILE_TESTS += drm_atomic_state_ref_counting
+NV_CONFTEST_FUNCTION_COMPILE_TESTS += drm_driver_has_gem_prime_res_obj
+NV_CONFTEST_FUNCTION_COMPILE_TESTS += drm_atomic_helper_connector_dpms
+NV_CONFTEST_FUNCTION_COMPILE_TESTS += drm_connector_funcs_have_mode_in_name
+NV_CONFTEST_FUNCTION_COMPILE_TESTS += drm_connector_has_vrr_capable_property
+NV_CONFTEST_FUNCTION_COMPILE_TESTS += vmf_insert_pfn
+NV_CONFTEST_FUNCTION_COMPILE_TESTS += drm_framebuffer_get
+NV_CONFTEST_FUNCTION_COMPILE_TESTS += drm_gem_object_get
+NV_CONFTEST_FUNCTION_COMPILE_TESTS += drm_dev_put
+NV_CONFTEST_FUNCTION_COMPILE_TESTS += drm_format_num_planes
+NV_CONFTEST_FUNCTION_COMPILE_TESTS += drm_connector_for_each_possible_encoder
+NV_CONFTEST_FUNCTION_COMPILE_TESTS += drm_rotation_available
+NV_CONFTEST_FUNCTION_COMPILE_TESTS += drm_vma_offset_exact_lookup_locked
+NV_CONFTEST_FUNCTION_COMPILE_TESTS += drm_gem_object_put_unlocked
+NV_CONFTEST_FUNCTION_COMPILE_TESTS += nvhost_dma_fence_unpack
+NV_CONFTEST_FUNCTION_COMPILE_TESTS += list_is_first
+NV_CONFTEST_FUNCTION_COMPILE_TESTS += timer_setup
+NV_CONFTEST_FUNCTION_COMPILE_TESTS += dma_fence_set_error
+NV_CONFTEST_FUNCTION_COMPILE_TESTS += sync_file_get_fence
+NV_CONFTEST_FUNCTION_COMPILE_TESTS += drm_aperture_remove_conflicting_pci_framebuffers
+NV_CONFTEST_FUNCTION_COMPILE_TESTS += drm_fbdev_generic_setup
+NV_CONFTEST_FUNCTION_COMPILE_TESTS += drm_connector_attach_hdr_output_metadata_property
+
+conftest/functions.h: ${PWD}/conftest.sh ${DRMKMODDIR}
+	mkdir -p conftest
+	${PWD}/conftest.sh '${CC}' x86_64 ${DRMKMODDIR} this_arg_not_used_on_bsd compile_tests '${NV_CONFTEST_CFLAGS}' ${NV_CONFTEST_FUNCTION_COMPILE_TESTS} > conftest/functions.h
+
+NV_CONFTEST_TYPE_COMPILE_TESTS += drm_bus_present
+NV_CONFTEST_TYPE_COMPILE_TESTS += drm_bus_has_bus_type
+NV_CONFTEST_TYPE_COMPILE_TESTS += drm_bus_has_get_irq
+NV_CONFTEST_TYPE_COMPILE_TESTS += drm_bus_has_get_name
+NV_CONFTEST_TYPE_COMPILE_TESTS += drm_driver_has_device_list
+NV_CONFTEST_TYPE_COMPILE_TESTS += drm_driver_has_legacy_dev_list
+NV_CONFTEST_TYPE_COMPILE_TESTS += drm_driver_has_set_busid
+NV_CONFTEST_TYPE_COMPILE_TESTS += drm_crtc_state_has_connectors_changed
+NV_CONFTEST_TYPE_COMPILE_TESTS += drm_init_function_args
+NV_CONFTEST_TYPE_COMPILE_TESTS += drm_helper_mode_fill_fb_struct
+NV_CONFTEST_TYPE_COMPILE_TESTS += drm_master_drop_has_from_release_arg
+NV_CONFTEST_TYPE_COMPILE_TESTS += drm_driver_unload_has_int_return_type
+NV_CONFTEST_TYPE_COMPILE_TESTS += vm_fault_has_address
+NV_CONFTEST_TYPE_COMPILE_TESTS += vm_ops_fault_removed_vma_arg
+NV_CONFTEST_TYPE_COMPILE_TESTS += drm_atomic_helper_crtc_destroy_state_has_crtc_arg
+NV_CONFTEST_TYPE_COMPILE_TESTS += drm_atomic_helper_plane_destroy_state_has_plane_arg
+NV_CONFTEST_TYPE_COMPILE_TESTS += drm_mode_object_find_has_file_priv_arg
+NV_CONFTEST_TYPE_COMPILE_TESTS += dma_buf_owner
+NV_CONFTEST_TYPE_COMPILE_TESTS += drm_connector_list_iter
+NV_CONFTEST_TYPE_COMPILE_TESTS += drm_atomic_helper_swap_state_has_stall_arg
+NV_CONFTEST_TYPE_COMPILE_TESTS += drm_driver_prime_flag_present
+NV_CONFTEST_TYPE_COMPILE_TESTS += vm_fault_t
+NV_CONFTEST_TYPE_COMPILE_TESTS += drm_gem_object_has_resv
+NV_CONFTEST_TYPE_COMPILE_TESTS += drm_crtc_state_has_async_flip
+NV_CONFTEST_TYPE_COMPILE_TESTS += drm_crtc_state_has_pageflip_flags
+NV_CONFTEST_TYPE_COMPILE_TESTS += drm_crtc_state_has_vrr_enabled
+NV_CONFTEST_TYPE_COMPILE_TESTS += drm_format_modifiers_present
+NV_CONFTEST_TYPE_COMPILE_TESTS += mm_has_mmap_lock
+NV_CONFTEST_TYPE_COMPILE_TESTS += drm_vma_node_is_allowed_has_tag_arg
+NV_CONFTEST_TYPE_COMPILE_TESTS += drm_vma_offset_node_has_readonly
+NV_CONFTEST_TYPE_COMPILE_TESTS += drm_display_mode_has_vrefresh
+NV_CONFTEST_TYPE_COMPILE_TESTS += drm_driver_master_set_has_int_return_type
+NV_CONFTEST_TYPE_COMPILE_TESTS += drm_driver_has_gem_free_object
+NV_CONFTEST_TYPE_COMPILE_TESTS += drm_prime_pages_to_sg_has_drm_device_arg
+NV_CONFTEST_TYPE_COMPILE_TESTS += drm_driver_has_gem_prime_callbacks
+NV_CONFTEST_TYPE_COMPILE_TESTS += drm_crtc_atomic_check_has_atomic_state_arg
+NV_CONFTEST_TYPE_COMPILE_TESTS += drm_gem_object_vmap_has_map_arg
+NV_CONFTEST_TYPE_COMPILE_TESTS += drm_plane_atomic_check_has_atomic_state_arg
+NV_CONFTEST_TYPE_COMPILE_TESTS += drm_device_has_pdev
+NV_CONFTEST_TYPE_COMPILE_TESTS += drm_crtc_state_has_no_vblank
+NV_CONFTEST_TYPE_COMPILE_TESTS += drm_mode_config_has_allow_fb_modifiers
+NV_CONFTEST_TYPE_COMPILE_TESTS += drm_has_hdr_output_metadata
+NV_CONFTEST_TYPE_COMPILE_TESTS += dma_resv_add_fence
+NV_CONFTEST_TYPE_COMPILE_TESTS += dma_resv_reserve_fences
+NV_CONFTEST_TYPE_COMPILE_TESTS += reservation_object_reserve_shared_has_num_fences_arg
+NV_CONFTEST_TYPE_COMPILE_TESTS += drm_connector_has_override_edid
+NV_CONFTEST_TYPE_COMPILE_TESTS += drm_master_has_leases
+NV_CONFTEST_TYPE_COMPILE_TESTS += drm_file_get_master
+NV_CONFTEST_TYPE_COMPILE_TESTS += drm_modeset_lock_all_end
+NV_CONFTEST_TYPE_COMPILE_TESTS += drm_connector_lookup
+NV_CONFTEST_TYPE_COMPILE_TESTS += drm_connector_put
+NV_CONFTEST_TYPE_COMPILE_TESTS += vm_area_struct_has_const_vm_flags
+NV_CONFTEST_TYPE_COMPILE_TESTS += drm_driver_has_dumb_destroy
+NV_CONFTEST_TYPE_COMPILE_TESTS += fence_ops_use_64bit_seqno
+NV_CONFTEST_TYPE_COMPILE_TESTS += drm_aperture_remove_conflicting_pci_framebuffers_has_driver_arg
+NV_CONFTEST_TYPE_COMPILE_TESTS += drm_mode_create_dp_colorspace_property_has_supported_colorspaces_arg
+
+conftest/types.h: ${PWD}/conftest.sh ${DRMKMODDIR}
+	mkdir -p conftest
+	${PWD}/conftest.sh '${CC}' x86_64 ${DRMKMODDIR} this_arg_not_used_on_bsd compile_tests '${NV_CONFTEST_CFLAGS}' ${NV_CONFTEST_TYPE_COMPILE_TESTS} > conftest/types.h
+
+conftest/macros.h:
+	mkdir -p conftest
+	touch conftest/macros.h
+
+conftest/symbols.h:
+	mkdir -p conftest
+	touch conftest/symbols.h
+
+CONFTEST_FILES = conftest/generic.h conftest/functions.h conftest/types.h conftest/macros.h conftest/symbols.h
+
+${CONFTEST_FILES}: conftest/headers.h
+
+*.c: ${CONFTEST_FILES}
+*.h: ${CONFTEST_FILES}
+
+clean:
+	rm -rf conftest
+
+.include <bsd.kmod.mk>
+
-- 
2.42.0

